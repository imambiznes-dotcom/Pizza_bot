from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù –û–¢ BOTFATHER
TOKEN = "8065839413:AAEpIr04pMmLuH68D4Q0uppSXMJQK393d58"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω—ã (–ø—Ä–æ—Å—Ç–æ –≤ –ø–∞–º—è—Ç–∏)
cart = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üçï –ú–µ–Ω—é"), KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"))

# –ú–µ–Ω—é –ø–∏—Ü—Ü
pizza_menu = ReplyKeyboardMarkup(resize_keyboard=True)
pizza_menu.add("üçï –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ ‚Äî 500‚ÇΩ", "üçï –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ ‚Äî 600‚ÇΩ")
pizza_menu.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Premium Pizza*\n–í—ã–±–∏—Ä–∞–π –≤–∫—É—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è! üòã",
        parse_mode="Markdown",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
@dp.message_handler(lambda m: m.text == "üçï –ú–µ–Ω—é")
async def show_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–∏—Ü—Ü—É:", reply_markup=pizza_menu)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.message_handler(lambda m: "üçï" in m.text and "‚ÇΩ" in m.text)
async def add_to_cart(message: types.Message):
    user_id = message.from_user.id
    pizza = message.text
    cart.setdefault(user_id, []).append(pizza)
    await message.answer(f"‚úÖ {pizza} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    items = cart.get(user_id, [])
    if not items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        order_list = "\n".join(items)
        total = sum(int(i.split("‚Äî")[1].replace("‚ÇΩ", "").strip()) for i in items)
        await message.answer(f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n{order_list}\n\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ")
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É? /order")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É
@dp.message_handler(commands=['order'])
async def order(message: types.Message):
    user_id = message.from_user.id
    items = cart.get(user_id, [])
    if not items:
        await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    order_list = "\n".join(items)
    total = sum(int(i.split("‚Äî")[1].replace("‚ÇΩ", "").strip()) for i in items)
    
    # ID –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID)
    ADMIN_ID = 7292033374
    await bot.send_message(
        ADMIN_ID,
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n–û—Ç: @{message.from_user.username}\n\n{order_list}\n\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    )
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    cart[user_id] = []

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
